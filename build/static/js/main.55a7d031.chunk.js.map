{"version":3,"sources":["component/NavBar.js","redux/books/bookSlice.js","component/Book.js","component/BookForm.js","component/BookList.js","component/Categories.js","App.js","index.js"],"names":["NavBar","React","createElement","className","Link","to","booksSlice","createSlice","name","initialState","books","item_id","title","author","category","reducers","addBook","state","action","concat","payload","removeBook","filter","book","itemId","actions","Book","_ref","dispatch","useDispatch","onClick","handleDelete","type","BookForm","setTitle","useState","setAuthor","onSubmit","e","preventDefault","Math","random","toString","value","onChange","target","placeholder","BookList","useSelector","map","key","id","Categories","App","Routes","Route","path","element","ReactDOM","createRoot","document","getElementById","render","StrictMode","BrowserRouter"],"mappings":"uPAqBeA,MAlBf,WACE,OACEC,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAI,sBACJD,IAAAC,cAAA,WACED,IAAAC,cAAA,MAAIC,UAAU,YACZF,IAAAC,cAAA,UACED,IAAAC,cAACE,IAAI,CAACC,GAAG,KAAI,SAEfJ,IAAAC,cAAA,UACED,IAAAC,cAACE,IAAI,CAACC,GAAG,eAAc,mB,eCXnC,MAuBMC,EAAaC,YAAY,CAC7BC,KAAM,QACNC,aAzBmB,CACnBC,MAAO,CACL,CACEC,QAAS,QACTC,MAAO,mBACPC,OAAQ,aACRC,SAAU,WAEZ,CACEH,QAAS,QACTC,MAAO,gBACPC,OAAQ,cACRC,SAAU,WAEZ,CACEH,QAAS,QACTC,MAAO,mBACPC,OAAQ,kBACRC,SAAU,gBAQdC,SAAU,CACRC,QAASA,CAACC,EAAOC,KACfD,EAAMP,MAAQO,EAAMP,MAAMS,OAAOD,EAAOE,UAE1CC,WAAYA,CAACJ,EAAOC,KAClBD,EAAMP,MAAQO,EAAMP,MAAMY,OACvBC,GAASA,EAAKC,SAAWN,EAAOE,aAM1Bd,EAAkB,QAC1B,MAAM,QAAEU,EAAO,WAAEK,GAAef,EAAWmB,QCRnCC,MA5Bf,SAAaC,GAET,IAFU,MACZf,EAAK,OAAEC,EAAM,SAAEC,EAAQ,OAAEU,GAC1BG,EACC,MAAMC,EAAWC,cAIjB,OACE5B,IAAAC,cAAA,WACED,IAAAC,cAAA,UACED,IAAAC,cAAA,UAAKW,GACLZ,IAAAC,cAAA,UAAKU,GACLX,IAAAC,cAAA,UAAKY,IAEPb,IAAAC,cAAA,UAAQ4B,QAVSC,KACnBH,EAASP,EAAWG,KASaQ,KAAK,UAAS,iBC2BpCC,MA1Cf,WACE,MAAML,EAAWC,eACVjB,EAAOsB,GAAYC,mBAAS,KAC5BtB,EAAQuB,GAAaD,mBAAS,IAgBrC,OACElC,IAAAC,cAAA,WACED,IAAAC,cAAA,QAAMmC,SAjBYC,IACpBA,EAAEC,iBACE3B,GAASC,IACXe,EACEZ,EAAQ,CACNJ,QACAC,SACAC,SAAU,UACVU,OAAQgB,KAAKC,SAASC,cAG1BR,EAAS,IACTE,EAAU,OAMRnC,IAAAC,cAAA,SACEyC,MAAO/B,EACPgC,SAAWN,GAAMJ,EAASI,EAAEO,OAAOF,OACnCX,KAAK,OACLc,YAAY,iBACZtC,KAAK,UAEPP,IAAAC,cAAA,SACEyC,MAAO9B,EACP+B,SAAWN,GAAMF,EAAUE,EAAEO,OAAOF,OACpCX,KAAK,OACLc,YAAY,aACZtC,KAAK,WAEPP,IAAAC,cAAA,UAAQ8B,KAAK,UAAS,eCdfe,MArBf,WACE,MAAMrC,EAAQsC,YAAa/B,GAAUA,EAAMP,MAAMA,OACjD,OACET,IAAAC,cAAA,WACED,IAAAC,cAAA,UACGQ,EAAMuC,IAAK1B,GACVtB,IAAAC,cAACwB,EAAI,CACHwB,IAAK3B,EAAK4B,GACVvC,MAAOW,EAAKX,MACZC,OAAQU,EAAKV,OACbC,SAAUS,EAAKT,SACfU,OAAQD,EAAKC,WAInBvB,IAAAC,cAAA,WACED,IAAAC,cAAC+B,EAAQ,SCXFmB,MARf,WACE,OACEnD,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAI,2DCcKmD,MAZf,WACE,OACEpD,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAACF,EAAM,MACPC,IAAAC,cAACoD,IAAM,KACLrD,IAAAC,cAACqD,IAAK,CAACC,KAAK,IAAIC,QAASxD,IAAAC,cAAC6C,EAAQ,QAClC9C,IAAAC,cAACqD,IAAK,CAACC,KAAK,cAAcC,QAASxD,IAAAC,cAACkD,EAAU,WCPzCM,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH7D,IAAAC,cAACD,IAAM8D,WAAU,KACf9D,IAAAC,cAAC8D,IAAa,KACZ/D,IAAAC,cAACmD,EAAG,W","file":"static/js/main.55a7d031.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction NavBar() {\n  return (\n    <div>\n      <h2>Samepage BookStore</h2>\n      <div>\n        <ul className=\"nav-list\">\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/Categories\">Categories</Link>\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default NavBar;\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  books: [\n    {\n      item_id: 'item1',\n      title: 'The Great Gatsby',\n      author: 'John Smith',\n      category: 'Fiction',\n    },\n    {\n      item_id: 'item2',\n      title: 'Anna Karenina',\n      author: 'Leo Tolstoy',\n      category: 'Fiction',\n    },\n    {\n      item_id: 'item3',\n      title: 'The Selfish Gene',\n      author: 'Richard Dawkins',\n      category: 'Nonfiction',\n    },\n  ],\n};\n\nconst booksSlice = createSlice({\n  name: 'books',\n  initialState,\n  reducers: {\n    addBook: (state, action) => {\n      state.books = state.books.concat(action.payload);\n    },\n    removeBook: (state, action) => {\n      state.books = state.books.filter(\n        (book) => book.itemId !== action.payload,\n      );\n    },\n  },\n});\n\nexport default booksSlice.reducer;\nexport const { addBook, removeBook } = booksSlice.actions;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { PropTypes } from 'prop-types';\nimport { removeBook } from '../redux/books/bookSlice';\n\nfunction Book({\n  title, author, category, itemId,\n}) {\n  const dispatch = useDispatch();\n  const handleDelete = () => {\n    dispatch(removeBook(itemId));\n  };\n  return (\n    <div>\n      <ul>\n        <li>{author}</li>\n        <li>{title}</li>\n        <li>{category}</li>\n      </ul>\n      <button onClick={handleDelete} type=\"button\">\n        Remove Book\n      </button>\n    </div>\n  );\n}\n\nBook.propTypes = {\n  title: PropTypes.string.isRequired,\n  author: PropTypes.string.isRequired,\n  category: PropTypes.string.isRequired,\n  itemId: PropTypes.string.isRequired,\n};\n\nexport default Book;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addBook } from '../redux/books/bookSlice';\n\nfunction BookForm() {\n  const dispatch = useDispatch();\n  const [title, setTitle] = useState('');\n  const [author, setAuthor] = useState('');\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (title && author) {\n      dispatch(\n        addBook({\n          title,\n          author,\n          category: 'fiction',\n          itemId: Math.random().toString(),\n        }),\n      );\n      setTitle('');\n      setAuthor('');\n    }\n  };\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n          type=\"text\"\n          placeholder=\"Add Book Title\"\n          name=\"title\"\n        />\n        <input\n          value={author}\n          onChange={(e) => setAuthor(e.target.value)}\n          type=\"text\"\n          placeholder=\"Add Author\"\n          name=\"author\"\n        />\n        <button type=\"submit\">Add Book</button>\n      </form>\n    </div>\n  );\n}\n\nexport default BookForm;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Book from \"./Book\";\nimport BookForm from \"./BookForm\";\n\nfunction BookList() {\n  const books = useSelector((state) => state.books.books);\n  return (\n    <div>\n      <ul>\n        {books.map((book) => (\n          <Book\n            key={book.id}\n            title={book.title}\n            author={book.author}\n            category={book.category}\n            itemId={book.itemId}\n          />\n        ))}\n      </ul>\n      <div>\n        <BookForm />\n      </div>\n    </div>\n  );\n}\nexport default BookList;\n","import React from 'react';\n\nfunction Categories() {\n  return (\n    <div>\n      <h2>A comprehensive guide to the different types of books</h2>\n    </div>\n  );\n}\n\nexport default Categories;\n","import React from 'react';\nimport './App.css';\nimport { Routes, Route } from 'react-router-dom';\nimport NavBar from './component/NavBar';\nimport BookList from './component/BookList';\nimport Categories from './component/Categories';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <Routes>\n        <Route path=\"/\" element={<BookList />} />\n        <Route path=\"/Categories\" element={<Categories />} />\n      </Routes>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}